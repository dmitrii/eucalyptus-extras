{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Appscale single node template",

  "Parameters" : {

    "AdminUserEmail" : {
      "Description" : "AppScale admin user",
      "Type" : "String",
      "Default" : "a@a.com"
    },

    "AdminUserPassword" : {
      "Description" : "AppScale admin password",
      "Type" : "String",
      "Default" : "password"
    },

    "InstanceType" : {
      "Description" : "Instance type to use",
      "Type" : "String",
      "Default" : "m3.medium"
    },

    "ImageId": {
      "Description" : "Identifier for the appscale image",
      "Type": "String"
    },

    "KeyName": {
      "Description" : "EC2 keypair for instance SSH access",
      "Type": "String"
    },

    "Zone": {
      "Description" : "Availability zone to use",
      "Type": "String",
      "Default": "auto-select"
    }

  },

  "Conditions" : {
    "UseZoneParameter" : {"Fn::Not": [{"Fn::Equals" : [{"Ref" : "Zone"}, "auto-select"]}]}
  },

  "Resources" : {

    "WaitConditionHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "Properties" : {
        "Handle" : { "Ref" : "WaitConditionHandle" },
        "Timeout" : "900"
      }
    },

    "SecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "appscale security group",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "1", "ToPort" : "65535", "CidrIp" : "0.0.0.0/0"}
        ]
      }
    },

    "Instance" : {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "AvailabilityZone": { "Fn::If" : [
          "UseZoneParameter",
          { "Ref" : "Zone" },
          { "Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] }
        ] },
        "ImageId"        : { "Ref" : "ImageId" },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ {"Ref" : "SecurityGroup"} ],
        "KeyName"        : { "Ref" : "KeyName" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#cloud-config\n",
          "write_files:\n",
          "  - path: /root/AppScalefile\n",
          "    permissions: \"0600\"\n",
          "    owner: root\n",
          "    content: |\n",
          "     ---\n",
          "     login      : PUBLIC_IP_HERE\n",
          "     ips_layout :\n",
          "       -\n",
          "         roles:\n",
          "           - master\n",
          "           - compute\n",
          "           - database\n",
          "           - zookeeper\n",
          "         nodes: PRIVATE_IP_HERE\n",
          "     admin_user : ", { "Ref" : "AdminUserEmail" } ,"\n",
          "     admin_pass : ", { "Ref" : "AdminUserPassword" } ,"\n",
          "     group      : ", { "Fn::GetAtt" : [ "SecurityGroup", "GroupId" ] }, "\n",
          "  - path: /root/cloud-start.sh\n",
          "    permissions: \"0700\"\n",
          "    owner: root\n",
          "    content: |\n",
          "     #!/bin/bash\n",
          "     set -euxo pipefail\n",
          "\n",
          "     WAITCONDURL=\"", { "Ref" : "WaitConditionHandle" }, "\"\n",
          "\n",
          "     # Configure ips\n",
          "     PRIVATE_IP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\n",
          "     PUBLIC_IP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)\n",
          "     sed --in-place \"s/PRIVATE_IP_HERE/${PRIVATE_IP}/\" /root/AppScalefile\n",
          "     sed --in-place \"s/PUBLIC_IP_HERE/${PUBLIC_IP}/\" /root/AppScalefile\n",
          "\n",
          "     # Configure ssh for root\n",
          "     export HOME=/root\n",
          "     mkdir -pv \"${HOME}/.ssh\" || true\n",
          "     chmod 700 \"${HOME}/.ssh\"\n",
          "     test -e \"${HOME}/.ssh/id_rsa.pub\" || ssh-keygen -q -t rsa -f \"${HOME}/.ssh/id_rsa\" -N \"\"\n",
          "     cat \"${HOME}/.ssh/id_rsa.pub\" >> \"${HOME}/.ssh/authorized_keys\"\n",
          "     chmod 600 \"${HOME}/.ssh/authorized_keys\"\n",
          "     if [ -e \"${HOME}/.ssh/known_hosts\" ]; then\n",
          "       ssh-keygen -R ${PUBLIC_IP}\n",
          "       ssh-keygen -R ${PRIVATE_IP}\n",
          "     fi\n",
          "     ssh-keyscan ${PUBLIC_IP} ${PRIVATE_IP} 2> /dev/null >> \"${HOME}/.ssh/known_hosts\"\n",
          "\n",
          "     # Start appscale\n",
          "     cd /root\n",
          "     appscale up\n",
          "\n",
          "     # Signal cloudformation wait condition handle\n",
          "     curl -s -X PUT -H 'Content-Type:' \\\n",
          "       --data-binary '{\"Status\": \"SUCCESS\", \"UniqueId\": \"up\", \"Data\": \"-\", \"Reason\": \"AppScale up\" }' \\\n",
          "       ${WAITCONDURL}\n",
          "runcmd:\n",
          " - /root/cloud-start.sh\n",
          "\n"
        ]]}}
      }
    }

  },

  "Outputs" : {

    "InstanceId" : {
      "Description" : "Appscale instance",
      "Value" : { "Ref" : "Instance" }
    },

    "Ip" : {
      "Description" : "Appscale instance ip",
      "Value" : { "Fn::GetAtt" : [ "Instance", "PublicIp"] }
    },

    "Hostname" : {
      "Description" : "Appscale instance host",
      "Value" : { "Fn::GetAtt" : [ "Instance", "PublicDnsName"] }
    },

    "Dashboard" : {
      "Description" : "AppScale dashboard url",
      "Value" : { "Fn::Join" : ["", ["https://", { "Fn::GetAtt" : [ "Instance", "PublicDnsName"] }, ":1443/"]] }
    }

  }
}

