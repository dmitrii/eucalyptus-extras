{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Rancher kubernetes cluster template",

  "Parameters" : {

    "ClusterHostCount": {
      "Description" : "Number of rancher host instances to launch",
      "Type": "String",
      "Default" : "1"
    },

    "ClusterInstanceType" : {
      "Description" : "Rancher host instance type",
      "Type" : "String",
      "Default" : "m3.xlarge"
    },

    "ClusterName": {
      "Description" : "Name of the rancher cluster to create",
      "Type": "String",
      "Default" : "cluster"
    },

    "ImageId": {
      "Description" : "Identifier for the rancher image",
      "Type": "String"
    },

    "KeyName": {
      "Description" : "EC2 keypair for SSH access to instances",
      "Type": "String",
      "Default": ""
    },

    "ServerInstanceType" : {
      "Description" : "Rancher server instance type",
      "Type" : "String",
      "Default" : "m3.xlarge"
    },

    "ServerPassword": {
      "Description" : "Rancher service admin password to use",
      "Type": "String",
      "Default" : "password"
    },

    "S3Endpoint": {
      "Description" : "Endpoint for the S3 service",
      "Type": "String",
      "Default" : "http://s3.internal:8773"
    }

  },

  "Conditions" : {
    "UseKeyNameParameter" : {"Fn::Not": [{"Fn::Equals" : [{"Ref" : "KeyName"}, ""]}]}
  },

  "Resources" : {

    "Bucket" : {
      "Type" : "AWS::S3::Bucket",
      "DeletionPolicy" : "Retain",
      "Properties" : {
        "LifecycleConfiguration" : {
          "Rules" : [ {
            "ExpirationInDays": 1,
            "Status" : "Enabled"
          } ]
        }
      }
    },

    "RancherWaitConditionHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "RancherWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "Properties" : {
        "Handle" : { "Ref" : "RancherWaitConditionHandle" },
        "Timeout" : "900"
      }
    },

    "KubeConfigWaitConditionHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "KubeConfigWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "Properties" : {
        "Handle" : { "Ref" : "KubeConfigWaitConditionHandle" },
        "Timeout" : "900"
      }
    },

    "RancherServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "rancher server security group",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0"}
        ]
      }
    },

    "RancherServerRole" : {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/rancher-kubernetes/"
      }
    },

    "RancherServerPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [ {
            "Action": [
              "s3:Get*",
              "s3:List*"
            ],
            "Effect": "Allow",
            "Resource": [
              { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "Bucket" } ] ] },
              { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "Bucket" }, "/*" ] ] }
            ]
          }, {
            "Action": [
              "s3:GetObject",
              "s3:PutObject"
            ],
            "Effect": "Allow",
            "Resource": [
              { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "Bucket" }, "/kube-config.yaml" ] ] }
            ]
          } ]
        },
        "PolicyName" : "master",
        "Roles" : [ { "Ref": "RancherServerRole" } ]
      }
    },

    "RancherServerInstanceProfile" : {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/rancher-kubernetes/",
        "Roles": [ {"Ref": "RancherServerRole"} ]
      }
    },

    "RancherServerInstance" : {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "IamInstanceProfile": { "Ref" : "RancherServerInstanceProfile" },
        "ImageId"        : { "Ref" : "ImageId" },
        "InstanceType"   : { "Ref" : "ServerInstanceType" },
        "SecurityGroups" : [ {"Ref" : "RancherServerSecurityGroup"} ],
        "KeyName"        : { "Fn::If" : [
          "UseKeyNameParameter",
          { "Ref" : "KeyName" },
          { "Ref" : "AWS::NoValue" }
        ] },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#cloud-config\n",
          "write_files:\n",
          "  - path: /root/.mc/config.json\n",
          "    permissions: \"0600\"\n",
          "    owner: root\n",
          "    content: |\n",
          "     {\n",
          "         \"version\": \"9\",\n",
          "         \"hosts\": {\n",
          "             \"es3\": {\n",
          "                 \"url\": \"",
          { "Ref" : "S3Endpoint" },
          "\",\n",
          "                 \"api\": \"S3v4\",\n",
          "                 \"lookup\": \"auto\",\n",
          "                 \"credentialsProvider\": \"profile\"\n",
          "             }\n",
          "         }\n",
          "     }\n",
          "  - path: /etc/rc.local\n",
          "    permissions: \"0755\"\n",
          "    owner: root\n",
          "    content: |\n",
          "     #!/bin/bash\n",
          "     wait-for-docker\n",
          "     /etc/start-rancher.sh &> /var/log/start-rancher.log &\n",
          "  - path: /etc/start-rancher.sh\n",
          "    permissions: \"0755\"\n",
          "    owner: root\n",
          "    content: |\n",
          "     #!/bin/bash\n",
          "     set -euxo pipefail\n",
          "\n",
          "     function cleanup {\n",
          "       if [ \"true\" == \"${SUCCESS}\" ] ; then\n",
          "         sudo rm -fv /etc/rc.local\n",
          "       else\n",
          "         sleep 30\n",
          "         reboot\n",
          "       fi\n",
          "     }\n",
          "     trap cleanup EXIT\n",
          "\n",
          "     SUCCESS=\"false\"\n",
          "\n",
          "     WAITCONDURL=\"",
          { "Ref" : "RancherWaitConditionHandle" },
          "\"\n",
          "     WAITCONDKCURL=\"",
          { "Ref" : "KubeConfigWaitConditionHandle" },
          "\"\n",
          "     BUCKETNAME=\"",
          { "Ref" : "Bucket" },
          "\"\n",
          "     RANCHERCLUSTER=\"",
          { "Ref" : "ClusterName" },
          "\"\n",
          "     RANCHERPASSWORD=\"",
          { "Ref" : "ServerPassword" },
          "\"\n",
          "     EC2_HOST=$(wget -O - --quiet http://169.254.169.254/latest/meta-data/public-hostname)\n",
          "     RANCHERSERVER=\"https://${EC2_HOST}\"\n",
          "     RANCHERAUTHHEADER=''\n",
          "\n",
          "     function postAnonJson {\n",
          "       wget -O - --quiet --no-check-certificate \\\n",
          "         --header \"Content-Type: application/json\" \\\n",
          "         --post-data \"${1}\" \\\n",
          "         ${2}\n",
          "     }\n",
          "\n",
          "     function postJson {\n",
          "       wget -O - --quiet --no-check-certificate \\\n",
          "         --header \"Content-Type: application/json\" \\\n",
          "         --header \"${RANCHERAUTHHEADER}\" \\\n",
          "         --post-data \"${1}\" \\\n",
          "         ${2}\n",
          "     }\n",
          "\n",
          "     function putJson {\n",
          "       curl -s --insecure -X PUT \\\n",
          "         -H \"Content-Type: application/json\" \\\n",
          "         -H \"${RANCHERAUTHHEADER}\" \\\n",
          "         --data-binary \"${1}\" \\\n",
          "         ${2}\n",
          "     }\n",
          "\n",
          "     function getJson {\n",
          "       wget -O - --quiet --no-check-certificate \\\n",
          "         --header \"${RANCHERAUTHHEADER}\" \\\n",
          "         ${1}\n",
          "     }\n",
          "\n",
          "     echo \"Starting rancher\"\n",
          "     ATTEMPTS=0\n",
          "     while ! sudo docker run -d --restart=unless-stopped \\\n",
          "                  -p 80:80 -p 443:443 rancher/rancher:v2.0.0; do\n",
          "       [ ${ATTEMPTS} -lt 12 ] || break; ATTEMPTS=$((ATTEMPTS+1))\n",
          "       sleep 5\n",
          "     done\n",
          "\n",
          "     # busybox wget does not support put\n",
          "     if [ ! -f /usr/bin/curl ] ; then\n",
          "       echo 'docker run --rm sjones4/minio-client curl \"$@\"' > /usr/bin/curl\n",
          "       chmod +x /usr/bin/curl\n",
          "     fi\n",
          "     echo 'docker run --rm -i -v /root/.mc:/root/.mc sjones4/minio-client mc \"$@\"' > /usr/bin/mc\n",
          "     chmod +x /usr/bin/mc\n",
          "\n",
          "     echo \"Waiting for rancher server to be up\"\n",
          "     ATTEMPTS=0\n",
          "     while ! wget -O - --quiet --no-check-certificate https://localhost/ping &>/dev/null; do\n",
          "       [ ${ATTEMPTS} -lt 12 ] || break\n",
          "       ATTEMPTS=$((ATTEMPTS+1))\n",
          "       sleep 5\n",
          "     done\n",
          "     sleep 15\n",
          "\n",
          "     LOGINRESPONSE=$(postAnonJson \\\n",
          "                     '{\"username\":\"admin\",\"password\":\"admin\"}'\\\n",
          "                     'https://127.0.0.1/v3-public/localProviders/local?action=login')\n",
          "     LOGINTOKEN=$(jq -r .token <<< \"${LOGINRESPONSE}\")\n",
          "     RANCHERUSERID=$(jq -r .userId <<< \"${LOGINRESPONSE}\")\n",
          "     RANCHERAUTHHEADER='Authorization: Bearer '${LOGINTOKEN}\n",
          "\n",
          "     echo \"Setting rancher admin password\"\n",
          "     postJson \\\n",
          "       '{\"currentPassword\":\"admin\",\"newPassword\":\"'${RANCHERPASSWORD}'\"}' \\\n",
          "       'https://127.0.0.1/v3/users?action=changepassword'\n",
          "\n",
          "     # Create API key\n",
          "     APIRESPONSE=$(postJson \\\n",
          "                     '{\"type\":\"token\",\"description\":\"automation\"}' \\\n",
          "                     'https://127.0.0.1/v3/token')\n",
          "     # Extract and store token\n",
          "     APITOKEN=$(jq -r .token <<< \"${APIRESPONSE}\")\n",
          "     RANCHERAUTHHEADER='Authorization: Bearer '${APITOKEN}\n",
          "\n",
          "     # Set server url\n",
          "     putJson \\\n",
          "       '{\"name\":\"server-url\",\"value\":\"'${RANCHERSERVER}'\"}' \\\n",
          "       ${RANCHERSERVER}/v3/settings/server-url\n",
          "\n",
          "     # Create cluster\n",
          "     CLUSTERRESPONSE=$(postJson \\\n",
          "       '{\"type\":\"cluster\",\"nodes\":[],\"rancherKubernetesEngineConfig\":{\"ignoreDockerVersion\":true},\"name\":\"'${RANCHERCLUSTER}'\"}' \\\n",
          "       'https://127.0.0.1/v3/cluster')\n",
          "     # Extract clusterid to use for generating the docker run command\n",
          "     CLUSTERID=$(jq -r .id <<< \"${CLUSTERRESPONSE}\")\n",
          "\n",
          "     # Generate docker run\n",
          "     AGENTIMAGE=$(getJson https://127.0.0.1/v3/settings/agent-image | jq -r .value)\n",
          "\n",
          "     # Generate token\n",
          "     AGENTTOKEN=$(postJson \\\n",
          "                    '{\"type\":\"clusterRegistrationToken\",\"clusterId\":\"'${CLUSTERID}'\"}' \\\n",
          "                    'https://127.0.0.1/v3/clusterregistrationtoken' | jq -r .token)\n",
          "\n",
          "     # Retrieve CA certificate and generate checksum\n",
          "     SETTINGRESPONSE=$(getJson https://127.0.0.1/v3/settings/cacerts)\n",
          "     CACHECKSUM=$(echo \"${SETTINGRESPONSE}\" | jq -r .value | sha256sum | awk '{ print $1 }')\n",
          "     CLUSTERCAD=$(echo \"${SETTINGRESPONSE}\" | jq -r .value | openssl enc -base64 | tr -d '\\n')\n",
          "\n",
          "     # Write config and upload\n",
          "     mc pipe es3/${BUCKETNAME}/kube-config.yaml<<EOF\n",
          "     apiVersion: v1\n",
          "     kind: Config\n",
          "     clusters:\n",
          "     - name: \"${RANCHERCLUSTER}\"\n",
          "       cluster:\n",
          "         server: \"https://${EC2_HOST}/k8s/clusters/${CLUSTERID}\"\n",
          "         api-version: v1\n",
          "         certificate-authority-data: \"${CLUSTERCAD}\"\n",
          "\n",
          "     users:\n",
          "     - name: \"${RANCHERUSERID}\"\n",
          "       user:\n",
          "         token: \"${APITOKEN}\"\n",
          "\n",
          "     contexts:\n",
          "     - name: \"${RANCHERCLUSTER}\"\n",
          "       context:\n",
          "         user: \"${RANCHERUSERID}\"\n",
          "         cluster: \"${RANCHERCLUSTER}\"\n",
          "\n",
          "     current-context: \"${RANCHERCLUSTER}\"\n",
          "     EOF\n",
          "     KUBECONFIGURL=$(mc --json share download es3/${BUCKETNAME}/kube-config.yaml | jq -r .share)\n",
          "     curl -s -X PUT -H 'Content-Type:' \\\n",
          "       --data-binary '{\"Status\": \"SUCCESS\", \"UniqueId\": \"kube-config.yaml\", \"Data\": \"'${KUBECONFIGURL}'\", \"Reason\": \"Kubernetes configuration url\" }' \\\n",
          "       ${WAITCONDKCURL}\n",
          "\n",
          "     # Signal cloudformation wait condition handle\n",
          "     curl -s -X PUT -H 'Content-Type:' \\\n",
          "       --data-binary '{\"Status\": \"SUCCESS\", \"UniqueId\": \"token\", \"Data\": \"'${AGENTTOKEN}:${CACHECKSUM}'\", \"Reason\": \"Agent token created\" }' \\\n",
          "       ${WAITCONDURL}\n",
          "\n",
          "     SUCCESS=\"true\"\n",
          "\n"
        ]]}}
      }
    },

    "RancherHostWaitConditionHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "RancherHostWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "Properties" : {
        "Handle" : { "Ref" : "RancherHostWaitConditionHandle" },
        "Timeout" : "900"
      }
    },

    "RancherHostSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "rancher host security group",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "1", "ToPort" : "65535", "CidrIp" : "0.0.0.0/0"}
        ]
      }
    },

    "RancherHostLaunchConfiguration"  : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "ImageId"        : { "Ref" : "ImageId" },
        "SecurityGroups" : [ { "Ref" : "RancherHostSecurityGroup" } ],
        "InstanceType"   : { "Ref" : "ClusterInstanceType" },
        "KeyName"        : { "Fn::If" : [
          "UseKeyNameParameter",
          { "Ref" : "KeyName" },
          { "Ref" : "AWS::NoValue" }
        ] },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#cloud-config\n",
          "write_files:\n",
          "  - path: /etc/rc.local\n",
          "    permissions: \"0755\"\n",
          "    owner: root\n",
          "    content: |\n",
          "     #!/bin/bash\n",
          "     wait-for-docker\n",
          "     /etc/start-rancher.sh &> /var/log/start-rancher.log &\n",
          "  - path: /etc/start-rancher.sh\n",
          "    permissions: \"0755\"\n",
          "    owner: root\n",
          "    content: |\n",
          "     #!/bin/bash\n",
          "     set -euxo pipefail\n",
          "\n",
          "     function cleanup {\n",
          "       if [ \"true\" == \"${SUCCESS}\" ] ; then\n",
          "         sudo rm -fv /etc/rc.local\n",
          "       else\n",
          "         sleep 30\n",
          "         reboot\n",
          "       fi\n",
          "     }\n",
          "     trap cleanup EXIT\n",
          "\n",
          "     SUCCESS=\"false\"\n",
          "\n",
          "     WAITCONDURL=\"",
          { "Ref" : "RancherHostWaitConditionHandle" },
          "\"\n",
          "     RANCHERSERVER=\"",
          { "Fn::Join" : ["", ["https://", {
            "Fn::GetAtt" : [ "RancherServerInstance", "PublicDnsName" ]
          }, "/"]] },
          "\"\n",
          "     TOKENANDCHECKSUMJSON='",
          { "Fn::GetAtt" : [ "RancherWaitCondition", "Data" ]},
          "'\n",
          "     TOKEN=$(echo \"${TOKENANDCHECKSUMJSON}\" | jq -r .token | cut -d : -f 1)\n",
          "     CHECKSUM=$(echo \"${TOKENANDCHECKSUMJSON}\" | jq -r .token | cut -d : -f 2)\n",
          "\n",
          "     # busybox wget does not support put\n",
          "     if [ ! -f /usr/bin/curl ] ; then\n",
          "       echo 'docker run --rm sjones4/minio-client curl \"$@\"' > /usr/bin/curl\n",
          "       chmod +x /usr/bin/curl\n",
          "     fi\n",
          "\n",
          "     echo \"Starting rancher\"\n",
          "     ATTEMPTS=0\n",
          "     while ! sudo docker run -d --privileged --restart=unless-stopped --net=host \\\n",
          "                  -v /etc/kubernetes:/etc/kubernetes \\\n",
          "                  -v /var/run:/var/run \\\n",
          "                  rancher/rancher-agent:v2.0.0 \\\n",
          "                  --server ${RANCHERSERVER} --token ${TOKEN} --ca-checksum ${CHECKSUM} \\\n",
          "                  --etcd --controlplane --worker; do\n",
          "       [ ${ATTEMPTS} -lt 12 ] || break; \n",
          "       ATTEMPTS=$((ATTEMPTS+1))\n",
          "       sleep 5\n",
          "     done\n",
          "\n",
          "     echo \"Notifying wait condition\"\n",
          "     ATTEMPTS=0\n",
          "     while ! curl -s -X PUT -H 'Content-Type:' \\\n",
          "             --data-binary '{ \"Status\" : \"SUCCESS\", \"UniqueId\" : \"cluster\", \"Data\" : \"up\", \"Reason\" : \"Cluster host started\" }' \\\n",
          "             ${WAITCONDURL}; do\n",
          "       [ ${ATTEMPTS} -lt 12 ] || break; \n",
          "       ATTEMPTS=$((ATTEMPTS+1))\n",
          "       sleep 5\n",
          "     done\n",
          "\n",
          "     SUCCESS=\"true\"\n",
          "\n"
        ]]}}
      }
    },

    "RancherHostAutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : [{ "Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] }],
        "LaunchConfigurationName" : { "Ref" : "RancherHostLaunchConfiguration"  },
        "MinSize" : 0,
        "MaxSize" : 50,
        "DesiredCapacity" : { "Ref" : "ClusterHostCount" }
      }
    }

  },

  "Outputs" : {
    "KubeConfigUrl" : {
      "Description" : "Kubernetes configuration download url",
      "Value" : { "Fn::GetAtt" : [ "KubeConfigWaitCondition", "Data" ]}
    },

    "RancherServerInstanceId" : {
      "Description" : "Rancher server instance",
      "Value" : { "Ref" : "RancherServerInstance" }
    },

    "RancherHostAutoScalingGroupName" : {
      "Description" : "Rancher host auto scaling group",
      "Value" : { "Ref" : "RancherHostAutoScalingGroup" }
    },

    "RancherClusterCapacityCommand" : {
      "Description" : "Command to set the capacity for this cluster",
      "Value" : { "Fn::Join" : ["", ["euscale-set-desired-capacity -c <HOST_COUNT> ", { "Ref" : "RancherHostAutoScalingGroup"  }]] }
    },

    "RancherServerCredentials" : {
      "Description" : "URL for rancher server",
      "Value" : { "Fn::Join" : ["", ["admin/", { "Ref" : "ServerPassword"  }]] }
    },

    "RancherServerUrl" : {
      "Description" : "URL for rancher server",
      "Value" : { "Fn::Join" : ["", ["https://", { "Fn::GetAtt" : [ "RancherServerInstance", "PublicDnsName" ]}]] }
    }
  }
}
